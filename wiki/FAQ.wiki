#summary Frequently asked Questions

=Prerequisites=
==Programming==
You should have a working knowledge of C++ before you use Box2D. You should understand classes, inheritance, and pointers. There are plenty of resources on the web for learning C++. You should also understand your development environment: compilation, linking, and debugging.

==Math and Physics==
You should have a basic knowledge of rigid bodies, force, torque, and impulses. If you come across a math or physics concept you don't understand, please read about it on Wikipedia. Visit this page if you want a deeper knowledge of the algorithms used in Box2D.

=Build Issues=
==What platforms does Box2D support?==

Box2D is developed on Windows using MSVC 2008. Other platforms are supported by community contributions.

==Why doesn't my code compile and/or link?==

There are many reasons why a build can go bad. Here are a few that have come up:

* Using old Box2D headers with new code.
* Not linking the Box2D library with your application.
* Using old project files that don't include some new source files.

=Rendering=
==What are Box2D's rendering capabilities?==
Box2D is only a physics engine. How you draw stuff is up to you.

==But the Testbed draws stuff==

Visualization is very important for debugging collision and physics. I wrote the test bed to help me test Box2D and give you examples of how to use Box2D. The TestBed is not part of the Box2D library.

==How do I draw shapes?==

Drawing shapes is not supported and shape internal data is likely to change. Instead you should implement the b2DebugDraw interface.

==How do I convert pixels to meters?==

Suppose you have a sprite for a character that is 100x100 pixels. You decide to use a scaling factor that is 0.01. This will make the character physics box 1m x 1m. So go make a physics box that is 1x1. Now suppose the character starts out at pixel coordinate (345,679). So position the physics box at (3.45,6.79). Now simulate the physics world. Suppose the character physics box moves to (2.31,4.98), so move your character sprite to pixel coordinates (231,498).

Now the only tricky part is choosing a scaling factor. This really depends on your game. You should try to get your moving objects in the range 0.1 - 10 meters, with 1 meter being the sweet spot.
